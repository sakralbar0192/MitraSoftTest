{"version":3,"sources":["webpack://keksobooking/./source/js/form.js","webpack://keksobooking/./source/js/map.js","webpack://keksobooking/./source/js/util.js","webpack://keksobooking/./source/js/popup.js","webpack://keksobooking/./source/js/map-filtering-form.js","webpack://keksobooking/./source/js/main.js","webpack://keksobooking/./source/js/api.js"],"names":["AlowedTypes","AddFormRoomNumberFieldValues","AddFormCapacityFieldValues","AddFormTypeHousingValues","AddFormPricePerNightMinValues","mapFiltersForm","document","querySelector","mapFilterHousingFeatures","mapFilterHousingFeaturesInputs","querySelectorAll","addForm","addressField","avatarField","avatarImage","offerPhotosField","photosBlock","addFormResetButton","addFormTypeHousing","addFormPricePerNight","addFormTimeIn","addFormTimeOut","addFormRoomNumber","addFormCapacity","addFormTitle","makeFormInactive","form","formClass","classList","add","Array","from","children","forEach","value","setAttribute","makeFormActive","remove","removeAttribute","determineMinPrice","toLowerCase","resetAddForm","marker","markerCoordinateLat","markerCoordinateLng","reset","setCustomValidity","src","innerHTML","setLatLng","setTimeout","getLatLng","lat","toFixed","lng","displayOnErrorSendFormDataMessage","message","content","cloneNode","addEventListener","evt","keyCode","once","style","zIndex","appendChild","map","mainMarker","mainMarkerPosition","offersMarkers","similarOffersMarkerIcon","L","icon","iconUrl","iconSize","iconAnchor","mainMarkerIcon","makeMarker","icoMarker","draggable","renderOffersMarkers","data","createPopupFunc","slice","location","popup","bindPopup","keepInView","push","addTo","timeoutId","TYPES","RUSSIANTYPES","popupTemplate","fillElement","valueMassive","elementTag","elementClass","elementBlockToFill","isFeature","isOfferPhoto","elementsContainer","createDocumentFragment","elementsListItem","tagName","className","text","element","createElement","width","height","alt","createPopupElement","author","offer","popupElement","popupAvatar","popupTitle","popupAddress","popupPrice","popupType","popupCapacity","popupTime","popupFeatures","popupDescription","popupPhotos","avatar","textContent","title","address","price","currentValue","currentIndex","russianType","index","makeRusType","type","rooms","guests","checkin","checkout","description","features","photos","ANY_VALUE","HousingPriceFilterValues","HousingPricePoints","HousingQuestsFilterValues","HousingQuestsPoints","mapSelects","housingTypeFilter","housingPriceFilter","housingRoomsFilter","housingQuestsFilter","mapCheckboxes","checkDataElementValidity","dataElement","checkValidityDataElementByHousingType","determinePriceInterval","checkValidityDataElementByHousingPrice","toString","checkValidityDataElementByHousingRooms","checkValidityDataElementByHousingQuests","checkedCheckboxesValues","checkbox","checked","isDataElementValidByAdditionalFeatures","checkboxValue","hasOfferValue","some","feature","checkValidityByAdditionalFeatures","MAP_CENTER_COORDINATE_LAT","MAP_CENTER_COORDINATE_LNG","makeAddFormActiveFunction","onMoveEndFunction","functionForSendData","onSuccess","onError","on","setView","tileLayer","attribution","position","target","minLength","getAttribute","maxLength","valueLength","length","reportValidity","validateTitle","minPrice","parseInt","field","determineCapacity","defaultLat","isThisAvatarField","files","file","fileName","name","toUpperCase","it","endsWith","reader","FileReader","result","dataURL","photo","addImageToPhotoBlock","readAsDataURL","displayUploadedImage","formData","functionOnSuccessSendFormData","functionOnErrorSendFormData","fetch","method","body","then","response","ok","catch","preventDefault","FormData","displayOnSuccessSendFormDataMessage","renderMarkersFunction","filterField","input","configureFunctionalityResetButton","renderFunction","numberOfRenderingMarkers","concat","filter","filteredData","i","filterOffers","configureFiltering","callback","clearTimeout","error","alertShowTime","alertContainer","left","top","right","padding","fontSize","textAlign","backgroundColor","append","showAlert","status","json","Error"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const AlowedTypes = [\n  'JPEG',\n  'JPG',\n  'PNG',\n]; //разрешенные форматы изображений\n\nconst AddFormRoomNumberFieldValues = [\n  '100',\n  '1',\n  '2',\n  '3',\n]; //значения выпадающего списка \"Количество комнат\"\n\nconst AddFormCapacityFieldValues = [\n  '3',\n  '2',\n  '1',\n  '0',\n]; //значения выпадающего списка \"Количество мест\"\n\nconst AddFormTypeHousingValues = [\n  'BUNGALOW',\n  'FLAT',\n  'HOUSE',\n  'PALACE',\n]; //значения выпадающего списка \"Тип жилья\"\n\nconst AddFormPricePerNightMinValues = [\n  0,\n  1000,\n  5000,\n  10000,\n]; //значения минимальных цен поля \"Цена за ночь\"\n\nconst PRECISION_COORDINATE = 5; //количество знаков после запятой для координат в поле \"Адрес\"\nconst PHOTO_WIDTH = '40'; //ширина фотографии, загруженной в форму\nconst PHOTO_HEIGHT = '44'; //высота фотографии, загруженной в форму\nconst MESSAGE_Z_INDEX = 400; //значение z-индекса для сообщении о результате отправки формы\nconst FOUNDATION_OF_CALCULUS_SYSTEM = 10; //основание системы исчисления для приведения строки к числовому типу данных\nconst ESCAPE_KEY_CODE = 27; //код клавиши escape\n\nconst mapFiltersForm = document.querySelector('.map__filters');\nconst mapFilterHousingFeatures = mapFiltersForm.querySelector('#housing-features');\nconst mapFilterHousingFeaturesInputs = mapFilterHousingFeatures.querySelectorAll('.map__checkbox');\nconst addForm = document.querySelector('.ad-form');\nconst addressField = addForm.querySelector('#address');\nconst avatarField = addForm.querySelector('#avatar');\nconst avatarImage = addForm.querySelector('#avatar-image')\nconst offerPhotosField = addForm.querySelector('#images');\nconst photosBlock = addForm.querySelector('.ad-form__photo');\nconst addFormResetButton = addForm.querySelector('.ad-form__reset');\nconst addFormTypeHousing = addForm.querySelector('#type');\nconst addFormPricePerNight = addForm.querySelector('#price');\nconst addFormTimeIn = addForm.querySelector('#timein');\nconst addFormTimeOut = addForm.querySelector('#timeout');\nconst addFormRoomNumber = addForm.querySelector('#room_number');\nconst addFormCapacity = addForm.querySelector('#capacity');\nconst addFormTitle = addForm.querySelector('#title');\n\n/**\n * Функция делает переданную форму неактивной и добавляет атрибут disabled внутренним полям\n *\n * @param {object} form - форма, которую необходимо сделать неактивной\n * @param {string} - класс формы\n */\nconst makeFormInactive = (form, formClass) => {\n  form.classList.add(formClass + '--disabled');\n  Array.from(form.children).forEach((value) => {\n    value.setAttribute('disabled', 'disabled');\n  });\n};\n\n/**\n * Функция делает переданную форму активной и удаляет атрибут disabled у внутренних полей\n *\n * @param {object} form - форма, которую необходимо сделать активной\n * @param {string} - класс формы\n */\nconst makeFormActive = (form, formClass) => {\n  form.classList.remove(formClass + '--disabled');\n  Array.from(form.children).forEach((value) => {\n    value.removeAttribute('disabled');\n  });\n};\n\n/**\n * Функция делает формы фильтрации и подачи объявлений на странице неактивными\n */\nconst makeFormsInactive = () => {\n  makeFormInactive(mapFiltersForm, '.map__filters');\n  makeFormInactive(addForm, '.ad-form');\n};\n\n/**\n * Функция делает форму для добавления нового объявления активной\n */\nconst makeAddFormActive = () => {\n  makeFormActive(addForm, '.ad-form');\n};\n\n/**\n * Функция делает форму для фильтрации предложений активной\n */\nconst makeMapFiltersFormActive = () => {\n  makeFormActive(mapFiltersForm, '.map__filters');\n};\n\n/**\n * Функция устанавливает в поле Адрес значения по-умолчанию и делает его неактивным для ручного редактирования\n *\n * @param {number} - defaultLat - значение lat по-умолчанию\n * @param {number} - defaultLng - значение lng по-умолчанию\n */\nconst setAddressFieldDefaultValue = (defaultLat, defaultLng) => {\n  addressField.value = defaultLat + ', ' + defaultLng;\n  addressField.setAttribute('readonly', 'readonly');\n};\n\n/**\n * Функция устанавливает полю 'Адрес' значения параметра position\n *\n * @param {object} position - параметр, изменение которого отражается в поле \"Адрес\"\n */\nconst setAddressFieldValue = (position) => {\n  addressField.value = position.lat.toFixed(PRECISION_COORDINATE) + ', '  + position.lng.toFixed(PRECISION_COORDINATE);\n};\n\n/**\n * Функция определяющая значения поля \"Количество мест\" в зависимости от поля  \"Количество комнат\"\n *\n * @returns {Array} значения, которые может принимать поле \"Количество мест\"\n */\nconst determineCapacity = () => {\n  const addFormRoomNumberValue = addFormRoomNumber.value;\n  switch (addFormRoomNumberValue) {\n    case AddFormRoomNumberFieldValues[0]:\n      return [\n        AddFormCapacityFieldValues[3],\n      ];\n    case AddFormRoomNumberFieldValues[3]:\n      return [\n        AddFormCapacityFieldValues[0],\n        AddFormCapacityFieldValues[1],\n        AddFormCapacityFieldValues[2],\n      ];\n    case AddFormRoomNumberFieldValues[2]:\n      return [\n        AddFormCapacityFieldValues[1],\n        AddFormCapacityFieldValues[2],\n      ];\n    case AddFormRoomNumberFieldValues[1]:\n      return [\n        AddFormCapacityFieldValues[2],\n      ];\n  }\n};\n\n/**\n * Функция определяющая минимальную цену за ночь в соответствии с типом жилья\n *\n * @returns {number} - минимальная цена за ночь\n */\nconst determineMinPrice = () => {\n  const addFormTypeHousingValue = addFormTypeHousing.value;\n  switch (addFormTypeHousingValue) {\n    case AddFormTypeHousingValues[1].toLowerCase():\n      return AddFormPricePerNightMinValues[1];\n    case AddFormTypeHousingValues[2].toLowerCase():\n      return AddFormPricePerNightMinValues[2];\n    case AddFormTypeHousingValues[3].toLowerCase():\n      return AddFormPricePerNightMinValues[3];\n    case AddFormTypeHousingValues[4].toLowerCase():\n      return AddFormPricePerNightMinValues[4];\n  }\n};\n\n/**\n * Функция в зависимости от значений поля \"Количество комнат\" вводит ограничения на поле \"Количество мест\"\n */\nconst validateCapacity = () => {\n  const fields = [addFormRoomNumber, addFormCapacity];\n  fields.forEach((field) => {\n    field.addEventListener('change', () => {\n      const allowedValues = determineCapacity();\n      const isValueContains = allowedValues.some(value => value === addFormCapacity.value);\n      (isValueContains)\n        ? addFormCapacity.setCustomValidity('')\n        : addFormCapacity.setCustomValidity('Неподходящее значение')\n      addFormCapacity.reportValidity();\n    })\n  })\n};\n\n/**\n * Функция синхронизирующая значения полей в разделе 'Время заезда и выезда'\n */\nconst synchronizeTimeField = () => {\n  const fields = [addFormTimeIn, addFormTimeOut]\n  fields.forEach((field) => {\n    field.addEventListener('change', (evt) =>{\n      (evt.target === addFormTimeOut)\n        ? addFormTimeIn.value = addFormTimeOut.value\n        : addFormTimeOut.value = addFormTimeIn.value;\n    });\n  });\n};\n\n/**\n * Функция для валидации количества символов поля \"Заголовок объявления\"\n */\nconst validateTitle = () => {\n  const minLength = addFormTitle.getAttribute('minlength');\n  const maxLength = addFormTitle.getAttribute('maxlength');\n  addFormTitle.addEventListener('input', () => {\n    const valueLength = addFormTitle.value.length;\n    if (valueLength < minLength) {\n      addFormTitle.setCustomValidity('Еще ' + (minLength - valueLength) + ' символов');\n    }else if (valueLength > maxLength) {\n      addFormTitle.setCustomValidity('Удалите ' + (valueLength - maxLength) + ' символов');\n    }else {\n      addFormTitle.setCustomValidity('');\n    }\n    addFormTitle.reportValidity();\n  });\n};\n\n/**\n * Функция для валидации поля 'Цена за ночь'\n */\nconst validatePricePerNightField = () => {\n  addFormTypeHousing.addEventListener('change', () => {\n    const minPrice = determineMinPrice();\n    addFormPricePerNight.setAttribute('min', minPrice);\n    addFormPricePerNight.setAttribute('placeholder', minPrice);\n    if (addFormPricePerNight.value) {\n      (addFormPricePerNight.value < minPrice)\n        ? addFormPricePerNight.setCustomValidity('Цена за указанный тип жилья не может быть ниже ' + minPrice)\n        : addFormPricePerNight.setCustomValidity('');\n      addFormPricePerNight.reportValidity();\n    }\n  });\n  addFormPricePerNight.addEventListener('input', () => {\n    if (addFormPricePerNight.value) {\n      const minPrice = parseInt(addFormPricePerNight.getAttribute('min'), FOUNDATION_OF_CALCULUS_SYSTEM);\n      (addFormPricePerNight.value < minPrice)\n        ? addFormPricePerNight.setCustomValidity('Цена за указанный тип жилья не может быть ниже ' + minPrice)\n        : addFormPricePerNight.setCustomValidity('');\n      addFormPricePerNight.reportValidity();\n    }\n  });\n};\n\n/**\n * Функция добавляет изображение в формате DataURL В блок с фотографиями\n *\n * @param {object} dataURL - изображение в формате DataURL\n */\nconst addImageToPhotoBlock = (dataURL) => {\n  const photo = document.createElement('img');\n  photo.src = dataURL;\n  photo.setAttribute('width', PHOTO_WIDTH);\n  photo.setAttribute('height', PHOTO_HEIGHT);\n  photo.alt = 'Фотография жилья'\n  photosBlock.appendChild(photo);\n};\n\n/**\n * Функция заменяет изображение аватара на загруженный файл в соответствующем блоке\n * или вызывает функцию, которая добавляет фотографию в блок с фото.\n *\n * @param {object} file - файл изображение, которое необходимо отобразить на странице\n * @param {boolean} isThisAvatarField - результат проверки поля, необходимый для того, чтобы определить\n * в какой блок добавить загруженный файл - значение true означает, что изображение будет добавлено в блок аватара\n */\nconst displayUploadedImage = (file, isThisAvatarField) => {\n  const reader = new FileReader;\n  reader.addEventListener('load',() => {\n    (isThisAvatarField)\n      ? avatarImage.src = reader.result\n      : addImageToPhotoBlock(reader.result)\n  })\n  reader.readAsDataURL(file);\n};\n\n/**\n * Функция проверяющая, что загруженный файл имеет допустимое расширение\n */\nconst validateImageField = () => {\n  const imageFields = [offerPhotosField,avatarField];\n  imageFields.forEach((field) => {\n    const isThisAvatarField = (field === avatarField);\n    field.addEventListener('change', () => {\n      field.setCustomValidity('');\n      const files = Array.from(field.files);\n      files.forEach((file) => {\n        const fileName = file.name.toUpperCase();\n        const isFileAllowed = AlowedTypes.some((it) => {\n          return fileName.endsWith(it);\n        });\n        return (isFileAllowed)\n          ? displayUploadedImage(file, isThisAvatarField)\n          : field.setCustomValidity('Неверный формат изображения');\n      })\n      field.reportValidity();\n    })\n  })\n};\n\n/**\n * Функция возвращает поля в форме с фильтрами карты к значениям по умолчанию\n */\nconst resetMapFiltersForm = () => {\n  Array.from(mapFiltersForm.children).forEach((filterField) => {\n    (filterField === mapFilterHousingFeatures)\n      ? Array.from(mapFilterHousingFeaturesInputs).forEach((input) => {\n        input.checked = false;\n      })\n      : filterField.value = 'any';\n  })\n};\n\n/**\n * Функция сбрасывает поля формы для добавления нового объявления, а так же возвращает маркер синхронизированный\n * с полем 'Адрес' и значение самого поля в значения по-умолчанию\n *\n * @param {object} marker - маркер, связанный с полем 'Адрес'\n * @param {number} markerCoordinateLat - значение lat координаты маркера по-умолчанию\n * @param {number} markerCoordinateLng - значение lng координаты маркера по-умолчанию\n */\nconst resetAddForm = (marker, markerCoordinateLat, markerCoordinateLng) => {\n  addForm.reset();\n  addFormCapacity.setCustomValidity('');\n  addFormPricePerNight.setCustomValidity('');\n  addFormTitle.setCustomValidity('');\n  addFormPricePerNight.setAttribute('min',determineMinPrice());\n  addFormPricePerNight.setAttribute('placeholder', determineMinPrice());\n  avatarImage.src = 'img/muffin-grey.svg';\n  photosBlock.innerHTML = '';\n  marker.setLatLng(\n    [\n      markerCoordinateLat,\n      markerCoordinateLng,\n    ]);\n  setTimeout(\n    () => {\n      addressField.value = marker.getLatLng().lat.toFixed(PRECISION_COORDINATE) + ', '  + marker.getLatLng().lng.toFixed(PRECISION_COORDINATE);\n    } , 0);\n};\n\n/**\n * Функция настраивающая работу кнопки 'очистить' формы для подачи объявлений\n *\n * @param {object} marker - главный маркер позиция, которого сбрасывается до изначальной\n * @param {number} markerCoordinateLat - значение lat координаты маркера по-умолчанию\n * @param {number} markerCoordinateLng - значение lng координаты маркера по-умолчанию\n * @param {function} renderMarkersFunction - функция для отрисовки нефильтрованных предложений\n */\nconst configureFunctionalityResetButton = (marker, markerCoordinateLat, markerCoordinateLng, renderMarkersFunction) => {\n  addFormResetButton.addEventListener('click', () => {\n    resetAddForm(marker, markerCoordinateLat, markerCoordinateLng)\n    resetMapFiltersForm();\n    renderMarkersFunction();\n  });\n};\n\n/**\n * Функция, показывающая сообщение об успешной отправке формы\n */\nconst displayOnSuccessSendFormDataMessage = () => {\n  const message = document.querySelector('#success').content.querySelector('.success').cloneNode(true);\n  document.addEventListener('keydown',(evt) => {\n    if (evt.keyCode === ESCAPE_KEY_CODE){\n      message.remove();\n    }\n  }, {once: true});\n  document.addEventListener('click',() => {\n    message.remove();\n  }, {once: true});\n  message.style.zIndex = MESSAGE_Z_INDEX;\n  document.querySelector('main').appendChild(message);\n};\n\n/**\n * Функция, показывающая сообщение об ошибке при отправке формы\n */\nconst displayOnErrorSendFormDataMessage = () => {\n  const message = document.querySelector('#error').content.querySelector('.error').cloneNode(true);\n  document.addEventListener('keydown',(evt) => {\n    if (evt.keyCode === ESCAPE_KEY_CODE){\n      message.remove();\n    }\n  }, {once: true});\n  document.addEventListener('click',() => {\n    message.remove();\n  }, {once: true});\n  message.style.zIndex = MESSAGE_Z_INDEX;\n  document.querySelector('main').appendChild(message);\n};\n\n/**\n * Функция, которая настраивает отправку данных формы подачи объявления,\n * а также сброс формы и возврат значений к дефолтным\n *\n * @param {function} functionForSendData - Функция выполняющая отправку данных формы\n * @param {object} marker - маркер, значения которого нужно сбросить к изначальным при успешной отправке данных\n * @param {number} markerCoordinateLat - значение lat координаты маркера по-умолчанию\n * @param {number} markerCoordinateLng - значение lng координаты маркера по-умолчанию\n */\nconst configureFunctionalitySubmitButton = (functionForSendData, marker, markerCoordinateLat, markerCoordinateLng) => {\n  addForm.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n    const formData = new FormData(evt.target);\n    functionForSendData(\n      formData,\n      () => {\n        displayOnSuccessSendFormDataMessage();\n        resetAddForm(marker, markerCoordinateLat, markerCoordinateLng)\n      },\n      displayOnErrorSendFormDataMessage);\n  });\n};\n\n/**\n * Функция, настраивающая логику работы полей формы подачи объявления и их валидацию\n *\n * @param {number} addressDefaultLat - lat значение поля \"Адрес\" по-умолчанию\n * @param {number} addressDefaultLng - lng значение поля \"Адрес\" по-умолчанию\n */\nconst configureAddForm = (addressDefaultLat, addressDefaultLng) => {\n  validateTitle();\n  validatePricePerNightField();\n  validateCapacity();\n  setAddressFieldDefaultValue(addressDefaultLat, addressDefaultLng);\n  synchronizeTimeField();\n  validateImageField();\n};\n\nexport {\n  resetAddForm,\n  makeFormsInactive,\n  makeAddFormActive,\n  setAddressFieldValue,\n  makeMapFiltersFormActive,\n  configureAddForm,\n  configureFunctionalityResetButton,\n  configureFunctionalitySubmitButton\n};\n","/* global  L:readonly */\n/**\n * Основные переменые модуля\n */\nconst SIMILAR_OFFERS_MARKER_ICON_WIDTH = 40; //ширина иконки маркера для похожих объявлений\nconst SIMILAR_OFFERS_MARKER_ICON_HEIGHT = 40; //высота иконки маркера для похожих объявлений\nconst SIMILAR_OFFERS_MARKER_ICON_ANCHOR_X = 20; //координата Х точки на маркере указывающей на объект объявления\nconst SIMILAR_OFFERS_MARKER_ICON_ANCHOR_Y = 40; //координата Y точки на маркере указывающей на объект объявления\nconst MAIN_MARKER_ICON_WIDTH = 52; //ширина иконки главного маркера\nconst MAIN_MARKER_ICON_HEIGHT = 52; //ширина иконки главного маркера\nconst MAIN_MARKER_ICON_ANCHOR_X = 26; //координата Х точки на маркере указывающей на позицию маркера\nconst MAIN_MARKER_ICON_ANCHOR_Y = 52; //координата Y точки на маркере указывающей на позицию маркера\n\n\nlet map = {};\nlet mainMarker = {};\nlet mainMarkerPosition = {};\nlet offersMarkers = [];\n\n/**\n * Иконки для разных маркеров\n */\nconst similarOffersMarkerIcon = L.icon({\n  iconUrl: '../img/pin.svg',\n  iconSize: [SIMILAR_OFFERS_MARKER_ICON_WIDTH, SIMILAR_OFFERS_MARKER_ICON_HEIGHT],\n  iconAnchor: [SIMILAR_OFFERS_MARKER_ICON_ANCHOR_X, SIMILAR_OFFERS_MARKER_ICON_ANCHOR_Y],\n});\n\nconst mainMarkerIcon = L.icon({\n  iconUrl: '../img/main-pin.svg',\n  iconSize: [MAIN_MARKER_ICON_WIDTH, MAIN_MARKER_ICON_HEIGHT],\n  iconAnchor: [MAIN_MARKER_ICON_ANCHOR_X, MAIN_MARKER_ICON_ANCHOR_Y],\n});\n\n/**\n * Функция инициализирует карту и делает форму для подачи объявления активной\n *\n * @param {function} makeAddFormActiveFunction - Функция, которая сделает форму подачи объявления активной\n * при успешной инициализации карты\n * @param {number} mapCenterCoordinateLat - lat координата центра карты\n * @param {number} mapCenterCoordinateLat - lng координата центра карты\n * @param {number} mapZoom - значение увеличения карты по-умолчанию\n */\nconst initializeMap = (makeAddFormActiveFunction, mapCenterCoordinateLat, mapCenterCoordinateLng, mapZoom) => {\n  map = L.map('map-canvas')\n    .on('load',() => {\n      makeAddFormActiveFunction();\n    })\n    .setView({\n      lat: mapCenterCoordinateLat,\n      lng: mapCenterCoordinateLng,\n    }, mapZoom)\n\n  L.tileLayer(\n    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    },\n  ).addTo(map);\n};\n\n/**\n * Функция, создающая маркер\n *\n * @param {number} lat - первая координата маркера\n * @param {number} lng - вторая координата маркера\n * @param {object} icoMarker - иконка маркера\n * @param {boolean} draggable - возможность передвигать маркер\n *\n * @return {object} маркер с заданными параметрами\n */\nconst makeMarker = ( lat, lng, icoMarker, draggable) => {\n  const marker = L.marker(\n    {\n      lat: lat,\n      lng: lng,\n    },\n    {\n      draggable: draggable,\n      icon: icoMarker,\n    },\n  );\n  return marker;\n};\n\n/**\n * Функция, создающая маркер, который можно передвигать по карте, меняя тем самым значение поля \"Адрес\"\n *\n * @param {function} onMoveEndFunction - функция, в которую передаются координаты маркера,\n * при окончании его передвижения, для отображения их в поле \"Адрес\"\n * @param {number} mainMarkerCoordinateLat - lat координата маркера по-умолчанию\n * @param {number} mainMarkerCoordinateLng - lng координата маркера по-умолчанию\n */\nconst createMainMarker = (onMoveEndFunction, mainMarkerCoordinateLat, mainMarkerCoordinateLng) => {\n  mainMarker = makeMarker(mainMarkerCoordinateLat, mainMarkerCoordinateLng, mainMarkerIcon, true)\n    .on('moveend', (evt) => {\n      mainMarkerPosition = evt.target.getLatLng();\n      onMoveEndFunction(mainMarkerPosition);\n    });\n  mainMarker.addTo(map);\n};\n\n/**\n * Функция для отрисовки маркеров предложений и добавления им попапов\n *\n * @param {object} data - данные для формирования маркеров объявлений и их попапов\n * @param {function} createPopupFunc - функция, создающая попап для маркера обьявления\n */\nconst renderOffersMarkers = (data, createPopupFunc) => {\n  if (offersMarkers) {\n    offersMarkers.forEach((marker) => {\n      marker.remove();\n    })\n    offersMarkers =[];\n  }\n  const renderedData =  data.slice();\n  renderedData.forEach((value) => {\n    const marker = makeMarker(value.location.lat, value.location.lng, similarOffersMarkerIcon, false);\n    const popup = createPopupFunc(value)\n    marker.bindPopup(popup,\n      {\n        keepInView: true,\n      },\n    );\n    offersMarkers.push(marker);\n  });\n  offersMarkers.forEach((marker) => {\n    marker.addTo(map);\n  })\n}\n\nexport {initializeMap, createMainMarker, renderOffersMarkers, mainMarker}\n","let timeoutId = {}; //переменная для записи таймаута в функции устранения дребезга\n\n/**\n * Функция, создающая случайное число в указанном интервале с указанной точностью\n *\n * @param {number} min -минимальное значение интервала\n * @param {number} max - максимальное значение интервала\n * @param {number} precision - число знаков после запятой\n *\n * @returns {number} возвращает случайное число\n */\nconst getRandomNumber = function (min = 0, max = 1000, precision = 5) {\n  if (min < 0 || max < 0 || precision < 0) {\n    min = Math.sqrt(Math.pow(min));\n    max = Math.sqrt(Math.pow(max));\n    precision = Math.sqrt(Math.pow(precision));\n  }\n  if (min > max) {\n    return (((Math.random()* (min-max))+ max).toFixed(precision));\n  }else {\n    return (((Math.random()* (max-min))+ min).toFixed(precision));\n  }\n}\n\n/**\n * Функция, создающая элемент с заданным классом и текстовым содержимым, при наличии\n *\n * @param {string} tagName - имя тэга\n * @param {string} className - класс элемента\n * @param {string} text - текстовое содержимое\n *\n * @returns возвращает созданный Html элемент\n */\nconst createElement = (tagName, className, text) => {\n  const element = document.createElement(tagName);\n  if (className) {\n    element.classList.add(className);\n  }\n  if (text) {\n    element.textContent = text;\n  }\n  return element;\n};\n\n/**\n * Функция показывает сообщение об ошибке\n *\n * @param {number} alertShowTime  - время показа в милисекундах\n * @param {string} message -текст сообщения\n */\nconst showAlert = (alertShowTime, message) => {\n  const alertContainer = document.createElement('div');\n  alertContainer.style.zIndex = 100;\n  alertContainer.style.position = 'absolute';\n  alertContainer.style.left = 0;\n  alertContainer.style.top = 0;\n  alertContainer.style.right = 0;\n  alertContainer.style.padding = '10px 3px';\n  alertContainer.style.fontSize = '30px';\n  alertContainer.style.textAlign = 'center';\n  alertContainer.style.backgroundColor = 'red';\n\n  alertContainer.textContent = message;\n\n  document.body.append(alertContainer);\n\n  setTimeout(() => {\n    alertContainer.remove();\n  }, alertShowTime);\n};\n\n\n/**\n * Функция, выполняющая переданный колбэк после указанной задержки\n * @param {function} callback - функция, которую необходимо запустить после задержки\n * @param {number} timeout - задержка\n */\nconst debounce = (callback, timeout) => {\n  clearTimeout(timeoutId);\n  timeoutId = setTimeout(callback, timeout);\n}\n\nexport {getRandomNumber, createElement, showAlert, debounce};\n","import {createElement} from './util.js'\n\nconst TYPES = [\n  'palace',\n  'flat',\n  'house',\n  'bungalow',\n]; //типы жилья на английском языке\n\nconst RUSSIANTYPES = [\n  'Дворец',\n  'Квартира',\n  'Дом',\n  'Бунгало',\n]; //типы жилья на русском языке\n\nconst PHOTO_WIDTH = 45; //ширина фотографий жилья\nconst PHOTO_HEIGHT = 40; //высота фотографий жилья\n\nconst popupTemplate = document.querySelector('#card').content.querySelector('.popup');\n\n/**\n * Функция, возвращающая значение типа жилья на русском языке.\n *\n * @param {string} currentValue - текущее значение жилья(на английском языке)\n *\n * @returns возвращает значение типа жилья на русском языке\n */\nconst makeRusType = (currentValue) => {\n  let currentIndex = 0;\n  let russianType = '';\n  TYPES.forEach((value, index) => {\n    if (value === currentValue) {\n      currentIndex = index;\n    }\n  });\n  russianType = RUSSIANTYPES[currentIndex];\n  return russianType;\n};\n\n/**\n * Функция, создающая наполнение для блоков-контейнеров popup__features и popup__photos\n *\n * @param {Array} valueMassive - массив данных для генерации элементов\n * @param {string} elementTag - тэг формируемых элементов\n * @param {string} elementClass - класс формируемых элементов\n * @param {object} elementBlockToFill - блок в который будет добавлены новые элементы\n * @param {boolean} isFeature - проверка является ли формируемый список списком преимуществ\n * @param {boolean} isOfferPhoto - проаерка является ли формируемый список списком фотографий\n *\n * @return {DocumentFragment} возвращает фрагмент документа с разметкой для блоков контейнеров\n */\nconst fillElement = (valueMassive, elementTag, elementClass, elementBlockToFill, isFeature, isOfferPhoto) => {\n  const elementsContainer = document.createDocumentFragment();\n  valueMassive.forEach((value) => {\n    const elementsListItem = createElement(elementTag, elementClass);\n    if (isFeature) {\n      elementsListItem.classList.add('popup__feature--'+ value);\n    }\n    if (isOfferPhoto) {\n      elementsListItem.src = value;\n      elementsListItem.width = PHOTO_WIDTH;\n      elementsListItem.height = PHOTO_HEIGHT;\n      elementsListItem.alt = 'Фотография жилья';\n    }\n    elementsContainer.appendChild(elementsListItem);\n  });\n  elementBlockToFill.innerHTML = '';\n  elementBlockToFill.appendChild(elementsContainer);\n};\n\n/**\n * Функция создает разметку попапа для маркера предложения и заполняет его актуальными данными\n *\n * @param {object} {author, offer} - объект с данными, необходимыми для формирования попапа\n *\n * @returns возвращает сформированный элемент-попап предложения\n */\nconst createPopupElement = ({author, offer}) => {\n  const popupElement = popupTemplate.cloneNode(true);\n  const popupAvatar  = popupElement.querySelector('.popup__avatar');\n  const popupTitle = popupElement.querySelector('.popup__title');\n  const popupAddress = popupElement.querySelector('.popup__text--address');\n  const popupPrice = popupElement.querySelector('.popup__text--price');\n  const popupType = popupElement.querySelector('.popup__type');\n  const popupCapacity = popupElement.querySelector('.popup__text--capacity');\n  const popupTime = popupElement.querySelector('.popup__text--time');\n  const popupFeatures = popupElement.querySelector('.popup__features');\n  const popupDescription = popupElement.querySelector('.popup__description');\n  const popupPhotos = popupElement.querySelector('.popup__photos');\n  (author.avatar)\n    ? popupAvatar.src = author.avatar\n    : popupAvatar.remove();\n  (offer.title)\n    ? popupTitle.textContent = offer.title\n    : popupTitle.remove();\n  (offer.address)\n    ? popupAddress.textContent = offer.address\n    : popupAddress.remove();\n  (offer.price)\n    ? popupPrice.textContent = offer.price + ' ₽/ночь'\n    : popupPrice.remove();\n  (offer.type)\n    ? popupType.textContent =  makeRusType(offer.type)\n    : popupType.remove();\n  (offer.rooms && offer.guests)\n    ? popupCapacity.textContent = offer.rooms + ' комнаты для ' + offer.guests + ' гостей'\n    : popupCapacity.remove();\n  (offer.checkin && offer.checkout)\n    ? popupTime.textContent = 'Заезд после ' + offer.checkin + ', выезд до ' + offer.checkout\n    : popupTime.remove();\n  (offer.description)\n    ? popupDescription.textContent = offer.description\n    : popupDescription.remove();\n  (offer.features)\n    ? fillElement(offer.features, 'li', 'popup__feature', popupFeatures, true)\n    : popupFeatures.remove();\n  (offer.photos)\n    ? fillElement(offer.photos, 'img', 'popup__photo', popupPhotos, false, true)\n    : popupPhotos.remove();\n  return popupElement;\n};\n\nexport {createPopupElement};\n","const ANY_VALUE = 'any'; //дефолтное значение выпадающих списков в форме фильтрации объявлений\n\nconst HousingPriceFilterValues = [\n  'LOW',\n  'MIDDLE',\n  'HIGH',\n]; //значения выпадающего списка фильтрующего объявления по цене\n\nconst HousingPricePoints = [\n  10000,\n  50000,\n]; //ценовые точки для создания интервалов цены при фильтрации объявлений\n\nconst HousingQuestsFilterValues = [\n  '0',\n  '1',\n  '2',\n]; //значения выпадающего списка фильтрующего объявления по количеству гостей\n\nconst HousingQuestsPoints = [\n  1,\n  2,\n]; //точки для создания интервалов при фильтрации по количеству гостей\n\nconst mapFiltersForm = document.querySelector('.map__filters');\nconst mapSelects =  mapFiltersForm.querySelectorAll('.map__filter');\nconst housingTypeFilter = mapFiltersForm.querySelector('#housing-type');\nconst housingPriceFilter = mapFiltersForm.querySelector('#housing-price');\nconst housingRoomsFilter = mapFiltersForm.querySelector('#housing-rooms');\nconst housingQuestsFilter = mapFiltersForm.querySelector('#housing-guests');\nconst mapCheckboxes = mapFiltersForm.querySelectorAll('.map__checkbox');\n\n/**\n * Функция определяет ценовой интервал по которому произойдет сортировка\n *\n * @param {number} value - значение которое будет проходить проверку на принадлежностиь интервалу при сортировке\n *\n * @returns {boolean} результатпроверки принадлежности переданного значения интервалу\n */\nconst determinePriceInterval = (value) => {\n  switch (housingPriceFilter.value) {\n    case HousingPriceFilterValues[0].toLowerCase():\n      return value <= HousingPricePoints[0];\n    case HousingPriceFilterValues[1].toLowerCase():\n      return value > HousingPricePoints[0] && value <= HousingPricePoints[1];\n    case HousingPriceFilterValues[2].toLowerCase():\n      return value >= HousingPricePoints[1];\n  }\n}\n\n/**\n * Функция определяет вместимость по которой произойдет сортировка\n *\n * @param {number} value - значение которое будет проходить проверку при сортировке\n *\n * @returns {boolean} результат проверки на принадлежность переданного значения интервалу\n */\nconst determineCapacity = (value) => {\n  switch (housingQuestsFilter.value) {\n    case HousingQuestsFilterValues[0]:\n      return value > HousingQuestsPoints[1];\n    case HousingQuestsFilterValues[1]:\n      return value === HousingQuestsPoints[0];\n    case HousingQuestsFilterValues[2]:\n      return value === HousingQuestsPoints[1];\n  }\n};\n\n/**\n * Функция, проверяющая соответствие переданного элемента фильтру по вместимости\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n */\nconst checkValidityDataElementByHousingQuests = (dataElement) => {\n  return housingQuestsFilter.value === ANY_VALUE ||  determineCapacity(dataElement.offer.guests);\n};\n\n/**\n * Функция, проверяющая соответствие переданного элемента фильтру по количеству комнат\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n */\nconst checkValidityDataElementByHousingRooms = (dataElement) => {\n  return housingRoomsFilter.value === ANY_VALUE || dataElement.offer.rooms.toString() === housingRoomsFilter.value;\n};\n\n/**\n * Функция, проверяющая соответствие переданного элемента фильтру по цене жилья\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n */\nconst checkValidityDataElementByHousingPrice = (dataElement) => {\n  return housingPriceFilter.value === ANY_VALUE || determinePriceInterval(dataElement.offer.price);\n};\n\n/**\n * Функция, проверяющая соответствие переданного элемента фильтру по типу жилья\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n */\nconst checkValidityDataElementByHousingType = (dataElement) => {\n  return housingTypeFilter.value === ANY_VALUE || dataElement.offer.type === housingTypeFilter.value;\n};\n\n/**\n * Функция, проверяющая соответствие переданного элемента фильтру по дополнительным преимуществам\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n */\nconst checkValidityByAdditionalFeatures = (dataElement) => {\n  const checkedCheckboxesValues = [];\n  mapCheckboxes.forEach((checkbox) => {\n    if (checkbox.checked) {\n      checkedCheckboxesValues.push(checkbox.value)\n    }\n  })\n  let isDataElementValidByAdditionalFeatures = true;\n  checkedCheckboxesValues.forEach((checkboxValue) => {\n    const hasOfferValue = dataElement.offer.features.some((feature) => feature === checkboxValue);\n    isDataElementValidByAdditionalFeatures = isDataElementValidByAdditionalFeatures && hasOfferValue\n    return isDataElementValidByAdditionalFeatures\n  })\n  return isDataElementValidByAdditionalFeatures;\n}\n\n/**\n * Функция, проверяющая соответствие переданного элемента данных выставленным фильтрам\n *\n * @param {object} dataElement - элемент данных проходящий проверку на соответствие выставленным фильтрам\n *\n * @returns {boolean} - соответствует ли элемент фильтрам\n */\nconst checkDataElementValidity = (dataElement) => {\n  return checkValidityDataElementByHousingType(dataElement)\n  && checkValidityDataElementByHousingPrice(dataElement)\n  && checkValidityDataElementByHousingRooms(dataElement)\n  && checkValidityDataElementByHousingQuests(dataElement)\n  && checkValidityByAdditionalFeatures(dataElement);\n};\n\n/**\n * Функция, фильтрующая входящие данные\n *\n * @param {object} data - данные для фильтрации\n * @param {number} numberOfRenderingMarkers - количество отрисовываемых элементов\n */\nconst filterOffers = (data, numberOfRenderingMarkers) => {\n  const filteredData = [];\n  for (let i = 0; i < data.length; i++) {\n    if (filteredData.length === numberOfRenderingMarkers){\n      break;\n    }\n    if (checkDataElementValidity(data[i])){\n      filteredData.push(data[i])\n    }\n  }\n  return filteredData;\n};\n\n/**\n * Функция настраивает работу формы для фильтрации объявлений\n * и передает отфильтрованные данные другой функции, которая их отрисует\n *\n * @param {object} data - данные для фильтрации\n * @param {function} renderFunction - функция, которая отрисует отфильтрованные данные\n * @param {number} numberOfRenderingMarkers - количество отрисовываемых элементов\n */\nconst configureFiltering = (data, renderFunction, numberOfRenderingMarkers) => {\n  const filters = Array.from(mapSelects).concat(Array.from(mapCheckboxes))\n  filters.forEach((filter) => {\n    filter.addEventListener('change', () => {\n      let filteredData = filterOffers(data, numberOfRenderingMarkers);\n      renderFunction(filteredData)\n    })\n  })\n}\n\nexport {configureFiltering};\n","import {\n  makeFormsInactive,\n  makeAddFormActive,\n  configureAddForm,\n  setAddressFieldValue,\n  makeMapFiltersFormActive,\n  configureFunctionalityResetButton,\n  configureFunctionalitySubmitButton\n} from './form.js';\nimport {initializeMap, createMainMarker, renderOffersMarkers, mainMarker} from './map.js';\nimport {getData, sendData} from './api.js';\nimport {createPopupElement} from './popup.js';\nimport {configureFiltering} from './map-filtering-form.js';\nimport {showAlert, debounce} from './util.js';\n\nconst MAP_CENTER_COORDINATE_LAT = 35.68170; //lat координата центра карты\nconst MAP_CENTER_COORDINATE_LNG = 139.75388; //lng координата центра карты\nconst DEFAUL_MAP_ZOOM = 10; //дефолтное приближение карты\nconst NUMBER_RENDERING_MARKERS = 10; //количество отрисовываемых маркеров\nconst RENDER_DELAY = 500; //задержка перед отрисовкой маркеров на карте\nconst ERROR_ALERT_DISPLAY_TIME = 2000; //время показа сообщения об ошибке получения данных\n\nmakeFormsInactive();\n\ninitializeMap(makeAddFormActive, MAP_CENTER_COORDINATE_LAT, MAP_CENTER_COORDINATE_LNG, DEFAUL_MAP_ZOOM);\n\ncreateMainMarker(setAddressFieldValue, MAP_CENTER_COORDINATE_LAT, MAP_CENTER_COORDINATE_LNG);\n\nconfigureAddForm(MAP_CENTER_COORDINATE_LAT, MAP_CENTER_COORDINATE_LNG);\n\nconfigureFunctionalitySubmitButton((formData, functionOnSuccessSendFormData, functionOnErrorSendFormData) => {\n  sendData(formData, functionOnSuccessSendFormData, functionOnErrorSendFormData)\n}, mainMarker, MAP_CENTER_COORDINATE_LAT, MAP_CENTER_COORDINATE_LNG);\n\ngetData(\n  (data) => {\n    renderOffersMarkers(data.slice(0,NUMBER_RENDERING_MARKERS), createPopupElement);\n    makeMapFiltersFormActive();\n    configureFunctionalityResetButton(\n      mainMarker,\n      MAP_CENTER_COORDINATE_LAT,\n      MAP_CENTER_COORDINATE_LNG,\n      () => renderOffersMarkers(data, createPopupElement),\n    )\n    configureFiltering(\n      data,\n      (filteredData) => {\n        debounce(\n          () => {renderOffersMarkers(filteredData, createPopupElement)},\n          RENDER_DELAY,\n        )\n      },\n      NUMBER_RENDERING_MARKERS,\n    );\n  },\n  (error) => showAlert(ERROR_ALERT_DISPLAY_TIME, error),\n);\n","const SUCCESS__STATUS = 200; //статус успешного запроса\n\n/**\n * отправляет GET запрос на сервер и обрабатывает данные\n *\n * @param {function} onSuccess - функция, которая выполнится при успешном получении данных\n * @param {function} onError - функция, которая выполнится при ошибке получении данных\n */\nconst getData = (onSuccess, onError) => {\n  fetch('https://22.javascript.pages.academy/keksobooking/data')\n    .then((response) => {\n      if (response.status === SUCCESS__STATUS) {\n        return response.json();\n      }else {\n        throw new Error('Не удалось получить данные');\n      }\n    })\n    .then((data) => {\n      onSuccess(data);\n    }).\n    catch((error) => {\n      onError(error)\n    });\n}\n\n/**\n * Отправляет данные методом POST\n *\n * @param {object} data - данные, отправляемые на сервер\n * @param {function} onSuccess - функция, которая выполнится при успешной отправке данных\n * @param {function} onError - функция, которая выполнится при ошибке отправки данных\n */\nconst sendData = (data, onSuccess, onError) => {\n  fetch('https://22.javascript.pages.academy/keksobooking',\n    {\n      method: 'POST',\n      body: data,\n    },\n  )\n    .then((response) => {\n      if( response.ok) {\n        onSuccess();\n      }else {\n        onError();\n      }\n    })\n    .catch(() => {\n      onError();\n    })\n};\n\nexport {sendData, getData};\n"],"sourceRoot":""}
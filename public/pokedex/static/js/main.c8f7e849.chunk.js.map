{"version":3,"sources":["pages/PokemonPage/PokemonPage.module.scss","pages/PokemonsPage/PokemonsPage.module.scss","components/Loader/Loader.module.scss","components/Pagination/Pagination.module.scss","components/PokemonCard/PokemonCard.module.scss","pages/AbilityPage/AbilityPage.module.scss","components/Container/Container.module.scss","components/PokemonList/PokemonList.module.scss","context/AppContext.ts","API/PokemonService.ts","components/Container/Container.tsx","components/Loader/Loader.tsx","hooks/useFetching.ts","img/pokeball.png","pages/PokemonPage/PokemonPage.tsx","components/Pagination/Pagination.tsx","components/PokemonCard/PokemonCard.tsx","components/PokemonList/PokemonList.tsx","pages/PokemonsPage/PokemonsPage.tsx","pages/AbilityPage/AbilityPage.tsx","router/AppRouter.tsx","App.tsx","index.tsx","utils/utils.ts"],"names":["module","exports","defaultState","pokemons","setPokemons","currentPage","setCurrentPage","cardsPerView","AppContext","createContext","PokemonService","limit","axios","get","params","offset","response","data","name","id","responseType","abilityName","Container","title","children","className","cl","container","toUpperCase","slice","Loader","useFetching","callback","useState","isLoading","setIsLoading","error","setError","fetching","a","Error","message","PokemonPage","useParams","pokemon","setPokemon","pokemonImg","setPokemonImg","getOne","undefined","img","sprites","other","front_default","pokePlug","getPokemon","isPokemonLoading","pokemonGettingError","router","useHistory","useEffect","pokemonPage","pokemonPage__wrapper","pokemonPage__innerWrapper","pokemonPage__imageWrapper","src","alt","width","height","pokemonPage__pokemonDescription","pokemonPage__pokemonCharacteristics","stats","map","characteristic","stat","base_stat","pokemonPage__pokemonTypes","types","typesElement","type","pokemonPage__pokemonAbilities","abilities","abilitiesItem","onClick","push","ability","style","textAlign","to","Pagination","totalCount","useContext","getPagination","pagination","setPagination","findOutTotalPages","length","page","index","active","Number","findAverageIntegerValue","PokemonCard","PokemonName","pokemonId","getPokemonId","getImage","result","buildDataUrlImg","fetchImage","isImageLoading","imageLoadingError","pokemonCard","pokemonCard__imageWrapper","Pokemonlist","pokemonList__list","PokemonsPage","setTotalCount","useFetchingArray","getAll","count","results","fetchPokemons","isPokemonsLoading","pokemonLoadingError","PokemonsPage__pagination","pokemonList__wrapper","AbilityPage","abilityDescription","setAbilityDescription","getAbility","entries","effect_entries","entryInRequiredLanguage","find","entry","language","effect","fetchAbility","isAbilityLoading","abilityLoadingError","AppRouter","exact","path","App","contextValue","Provider","value","ReactDOM","render","StrictMode","document","getElementById","CardsPerView","Buffer","from","toString","Math","ceil","pageCount","getRange","start","end","Array","fill","v","i","delta","range","round","pages","min","withDots","pair","concat","x","y","trunc"],"mappings":"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","file":"static/js/main.c8f7e849.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokemonPage\":\"PokemonPage_pokemonPage__Ib7PX\",\"pokemonPage__wrapper\":\"PokemonPage_pokemonPage__wrapper__3EyBG\",\"pokemonPage__innerWrapper\":\"PokemonPage_pokemonPage__innerWrapper__1N1A9\",\"pokemonPage__imageWrapper\":\"PokemonPage_pokemonPage__imageWrapper__3rF6S\",\"pokemonPage__pokemonDescription\":\"PokemonPage_pokemonPage__pokemonDescription__3o6pv\",\"pokemonPage__pokemonCharacteristics\":\"PokemonPage_pokemonPage__pokemonCharacteristics__zLSws\",\"pokemonPage__pokemonTypes\":\"PokemonPage_pokemonPage__pokemonTypes__3p4Ve\",\"pokemonPage__pokemonAbilities\":\"PokemonPage_pokemonPage__pokemonAbilities__32ogO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PokemonsPage\":\"PokemonsPage_PokemonsPage__1I6Az\",\"pokemonPage__wrapper\":\"PokemonsPage_pokemonPage__wrapper__uYZTd\",\"PokemonsPage__innerWrapper\":\"PokemonsPage_PokemonsPage__innerWrapper__QiHn-\",\"PokemonsPage__pagination\":\"PokemonsPage_PokemonsPage__pagination__3hLCv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldio-wzu5q9yi9t\":\"Loader_ldio-wzu5q9yi9t__1SlRY\",\"loadingio-spinner-ripple-m3n8nqi9o6f\":\"Loader_loadingio-spinner-ripple-m3n8nqi9o6f__PmC6a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__39pr6\",\"active\":\"Pagination_active__1WIMF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokemonCard\":\"PokemonCard_pokemonCard__1wh0m\",\"pokemonCard__imageWrapper\":\"PokemonCard_pokemonCard__imageWrapper__2l7ER\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ability\":\"AbilityPage_ability__39zCG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__27c27\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokemonList\":\"PokemonList_pokemonList__1E0Mj\",\"pokemonList__wrapper\":\"PokemonList_pokemonList__wrapper__1ppqj\",\"pokemonList__loader\":\"PokemonList_pokemonList__loader__3_4j7\",\"pokemonList__list\":\"PokemonList_pokemonList__list__3UIlG\"};","import { createContext } from \"react\";\r\nimport { IContext } from \"../interfaces/interfaces\";\r\n\r\n\r\nconst defaultState: IContext = {\r\n    pokemons: [],\r\n    setPokemons: ()=>{},\r\n    currentPage: 1,\r\n    setCurrentPage: ()=>{},\r\n    cardsPerView: 0\r\n}\r\n\r\nexport const AppContext = createContext<IContext>(defaultState);","import axios from \"axios\";\r\nimport { IAbility, IPokemon, IPokemons } from \"../interfaces/interfaces\";\r\n\r\nexport default class PokemonService {    \r\n\r\n    static async  getAll(limit:number = 20, currentPage:number = 1) {\r\n        const response = await axios.get<IPokemons>('https://pokeapi.co/api/v2/pokemon', {\r\n            params: {\r\n                limit: limit,\r\n                offset: limit*(currentPage-1)\r\n            }\r\n        })        \r\n        return response.data\r\n    } \r\n\r\n    static async getOne(name:string) {\r\n        const response = await axios.get<IPokemon>('https://pokeapi.co/api/v2/pokemon/'+ name);\r\n        return response.data   \r\n    }    \r\n\r\n \r\n\r\n    static async getImage(id:number) {\r\n        const response = await axios.get<string>(`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`,{\r\n                responseType: 'arraybuffer',\r\n            })        \r\n        return response\r\n    }\r\n      \r\n    static async getAbility(abilityName:string) {\r\n        const response = await axios.get<IAbility>(`https://pokeapi.co/api/v2/ability/${abilityName}`)\r\n        return response.data\r\n    }\r\n}","import { FC, ReactChild, ReactNode } from 'react';\r\nimport cl from './Container.module.scss';\r\ninterface IContainerProps {\r\n    title: string,\r\n    children: ReactChild | ReactNode\r\n}\r\n\r\nconst Container: FC<IContainerProps>  = ({\r\n    title,\r\n    children\r\n}) => {\r\n    return (\r\n        <div className={cl.container}>\r\n            <h1>{title[0].toUpperCase() + title.slice(1)}</h1>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Container;\r\n","import cl from './Loader.module.scss';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={cl['loadingio-spinner-ripple-m3n8nqi9o6f']}>\r\n            <div className={cl['ldio-wzu5q9yi9t']}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;\r\n","import { useState } from 'react';\r\n\r\nexport function useFetching(callback:()=>void):[()=>void, boolean, string]  {\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const fetching:()=>void = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            await callback()\r\n        } catch (e: unknown) {\r\n            if (e instanceof Error) {\r\n                setError(e.message)\r\n            }          \r\n            \r\n        } finally {\r\n            setIsLoading(false)\r\n        }    \r\n    }\r\n\r\n    return [fetching, isLoading, error]\r\n}","export default __webpack_public_path__ + \"static/media/pokeball.91245270.png\";","import { useEffect, useState } from \"react\"\r\nimport { useHistory, useParams } from \"react-router\"\r\nimport { Link } from \"react-router-dom\"\r\nimport PokemonService from \"../../API/PokemonService\"\r\nimport Container from \"../../components/Container/Container\"\r\nimport Loader from \"../../components/Loader/Loader\"\r\nimport { useFetching } from \"../../hooks/useFetching\"\r\nimport pokePlug from '../../img/pokeball.png'\r\nimport { IPokemon } from \"../../interfaces/interfaces\"\r\nimport cl from './PokemonPage.module.scss'\r\n\r\ninterface IPokemonParams {\r\n    name: string\r\n}\r\n\r\nconst PokemonPage = () => {\r\n    const params: IPokemonParams = useParams()\r\n    const [pokemon, setPokemon] = useState<IPokemon>()\r\n    const [pokemonImg, setPokemonImg] = useState<string>('empty')\r\n    const [getPokemon, isPokemonLoading, pokemonGettingError] = useFetching(async() => {\r\n        const response = await PokemonService.getOne(params.name)   \r\n        setPokemon(response)     \r\n        if (response !== undefined) {\r\n            \r\n            let img = response.sprites.other[\"official-artwork\"].front_default\r\n            img===null ? setPokemonImg(pokePlug) : setPokemonImg(img)            \r\n        } \r\n    })\r\n    const router = useHistory()\r\n\r\n    useEffect(()=> {\r\n        getPokemon()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    return (     \r\n        <Container title={params.name}>   \r\n            <div className={cl.pokemonPage}>\r\n                {\r\n                    isPokemonLoading\r\n                        ?   <Loader />\r\n                        :   pokemonGettingError\r\n                            ?   <h1>Sory, something went wrong... {pokemonGettingError}</h1>\r\n                            :   pokemon!==undefined\r\n                                ?   <div className={cl.pokemonPage__wrapper}>\r\n                                        <div className={cl.pokemonPage__innerWrapper}>\r\n                                            <div className={cl.pokemonPage__imageWrapper}>\r\n                                                <img src={pokemonImg}\r\n                                                    alt={params.name} \r\n                                                    width=\"500\"\r\n                                                    height=\"500\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className={cl.pokemonPage__pokemonDescription}>    \r\n                                                <ul className={cl.pokemonPage__pokemonCharacteristics} >\r\n                                                    {pokemon.stats.map(characteristic => {\r\n                                                        return(\r\n                                                            <li key={characteristic.stat.name}>\r\n                                                                <span>{characteristic.stat.name}</span>\r\n                                                                <span>{characteristic.base_stat}</span>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })}\r\n                                                </ul>\r\n                                                <ul className={cl.pokemonPage__pokemonTypes}>\r\n                                                    {pokemon.types.map((typesElement) => {\r\n                                                        return(\r\n                                                            <li key={typesElement.type.name}>\r\n                                                                <span>{typesElement.type.name}</span>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })}\r\n                                                </ul>\r\n                                                <ul className={cl.pokemonPage__pokemonAbilities}>\r\n                                                    {pokemon.abilities.map(abilitiesItem => {\r\n                                                        return(\r\n                                                            <li \r\n                                                                key={abilitiesItem.ability.name} \r\n                                                                onClick={()=> {\r\n                                                                    router.push(`/pokemons/${params.name}/${abilitiesItem.ability.name}`)\r\n                                                                }} >\r\n                                                                <span>{abilitiesItem.ability.name}</span>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    <Link style={{textAlign:'center'}} to='/main'>back to Pokemons!</Link>\r\n                                </div> \r\n                                : <h1>Sory, something went wrong...</h1>      \r\n                }\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PokemonPage;\r\n","import { FC, useContext } from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { AppContext } from '../../context/AppContext'\r\nimport { findAverageIntegerValue, findOutTotalPages, getPagination } from '../../utils/utils'\r\nimport cl from './Pagination.module.scss'\r\n\r\ninterface IPagintionProps {\r\n    totalCount: number\r\n}\r\n\r\nconst Pagination: FC<IPagintionProps> = ({totalCount}) => {    \r\n    const {cardsPerView, currentPage, setCurrentPage} = useContext(AppContext);\r\n    const [pagination, setPagination] = useState(getPagination(currentPage, totalCount))\r\n\r\n    useEffect(()=> {\r\n        setPagination(getPagination(currentPage, findOutTotalPages(totalCount, cardsPerView)))\r\n    }, [currentPage, totalCount, cardsPerView])\r\n\r\n    if (!pagination.length) {\r\n        return (\r\n            <div></div>\r\n        )\r\n    } \r\n    \r\n    return (\r\n        <ul className={cl.pagination}>\r\n        {pagination.map((page, index) => {\r\n                            \r\n            return (                \r\n                <li \r\n                    key={\r\n                        page !== '...' \r\n                            ? page\r\n                            : pagination[index+1] !== undefined \r\n                                ?   findAverageIntegerValue(pagination[index-1], pagination[index+1])\r\n                                :   index+1\r\n                                                       \r\n                    } \r\n                    className={\r\n                        page===currentPage \r\n                            ? cl.active \r\n                            : ''\r\n                    }\r\n                > \r\n                <button\r\n                    onClick={()=> {\r\n                        if (page !== '...') {\r\n                            setCurrentPage(Number(page))\r\n                        } else {\r\n                            setCurrentPage(findAverageIntegerValue(pagination[index-1], pagination[index+1]))\r\n                        }                                        \r\n                }}>{page}</button>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n      </ul> \r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","import { useContext, useEffect, useState, FC } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { buildDataUrlImg, getPokemonId } from \"../../utils/utils\"\r\nimport cl from \"./PokemonCard.module.scss\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport PokemonService from \"../../API/PokemonService\";\r\nimport pokePlug from '../../img/pokeball.png'\r\nimport Loader from \"../Loader/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\ninterface IPokemonCardProps {\r\n    name: string\r\n    index: number\r\n}\r\n\r\nconst PokemonCard: FC<IPokemonCardProps> =  ({name ,index}) => {    \r\n    const {currentPage, cardsPerView} = useContext(AppContext);\r\n    const router = useHistory();\r\n    const  PokemonName = name[0].toUpperCase() + name.slice(1); \r\n    const [pokemonImg, setPokemonImg] = useState<string>('');\r\n    const [fetchImage, isImageLoading, imageLoadingError] = useFetching(async()=> {   \r\n        const pokemonId = getPokemonId(currentPage,cardsPerView, index)\r\n        const response = await PokemonService.getImage(pokemonId)        \r\n        const result = (response.data) \r\n            ?   buildDataUrlImg(response.data)\r\n            :   pokePlug          \r\n        setPokemonImg(result)\r\n    })    \r\n    \r\n    useEffect(()=> {        \r\n        fetchImage();        \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n\r\n   \r\n    return (\r\n        <div className={cl.pokemonCard} onClick={()=> {\r\n            router.push(`/pokemons/${name}`)\r\n        }}>\r\n            {isImageLoading\r\n                ?   <Loader />\r\n                :   <div className={cl.pokemonCard__imageWrapper}>\r\n                        <img src= {\r\n                            imageLoadingError\r\n                                ?   pokePlug\r\n                                :   pokemonImg\r\n                        }\r\n                            alt={PokemonName} \r\n                            width=\"250\"\r\n                            height=\"250\"\r\n                        />\r\n                    </div>\r\n                \r\n            }            \r\n            <h2>{PokemonName}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;\r\n","import { FC } from 'react';\r\nimport { IPokemonsItem } from '../../interfaces/interfaces';\r\nimport PokemonCard from '../PokemonCard/PokemonCard';\r\nimport cl from './PokemonList.module.scss';\r\n\r\ninterface PokemonListProps{\r\n    pokemons: IPokemonsItem[]\r\n}\r\n\r\nconst Pokemonlist: FC<PokemonListProps> = ({pokemons}) => {    \r\n\r\n    if (!pokemons.length) {\r\n        return (\r\n            <h2>No pokemons here!</h2>\r\n        )\r\n    }\r\n\r\n   return (\r\n    <ul className={cl.pokemonList__list}>               \r\n        {pokemons.map((pokemon, index) => {\r\n            return (\r\n                <li key={pokemon.name} >                    \r\n                    <PokemonCard  \r\n                        name={pokemon.name}\r\n                        index={index}\r\n                    />                                      \r\n                </li>   \r\n            ) \r\n        })}       \r\n    </ul>\r\n   )\r\n}\r\n\r\nexport default Pokemonlist;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport PokemonService from \"../../API/PokemonService\";\r\nimport Container from \"../../components/Container/Container\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\nimport Pokemonlist from \"../../components/PokemonList/PokemonList\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport { IPokemons } from \"../../interfaces/interfaces\";\r\nimport cl from './PokemonsPage.module.scss'\r\n\r\nconst PokemonsPage = () => {\r\n    const {pokemons, setPokemons, currentPage, cardsPerView} = useContext(AppContext); \r\n    const [totalCount, setTotalCount]= useState<number>(0);  \r\n    \r\n    const useFetchingArray:[()=>void, boolean, string] = useFetching(async () => {\r\n      const response : IPokemons = await PokemonService.getAll(cardsPerView, currentPage);\r\n      const totalCount = response.count;\r\n      setTotalCount(totalCount)\r\n      setPokemons(response.results)\r\n    })    \r\n    const [fetchPokemons, isPokemonsLoading, pokemonLoadingError] = useFetchingArray\r\n\r\n  useEffect(()=> {\r\n    fetchPokemons()\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPage])\r\n    \r\n    return (   \r\n      <Container title=\"pokeDex\">              \r\n        <div className={cl.PokemonsPage}>      \r\n  \r\n          <div className={cl.PokemonsPage__pagination}>\r\n            {((isPokemonsLoading && !pokemons.length) || pokemonLoadingError)\r\n              ? <div></div>\r\n              : <Pagination \r\n                  totalCount={totalCount} \r\n                />\r\n            }\r\n              \r\n          </div> \r\n  \r\n          <div className={cl.pokemonList__wrapper}>\r\n              {\r\n                isPokemonsLoading \r\n                  ? <Loader />\r\n                  : pokemonLoadingError \r\n                    ? <h2 style={{textAlign: 'center'}}>Error! {pokemonLoadingError} </h2>\r\n                    : <Pokemonlist pokemons={pokemons} />\r\n              }            \r\n          </div>   \r\n        </div> \r\n      </Container>\r\n    )\r\n};\r\n\r\nexport default PokemonsPage","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport PokemonService from '../../API/PokemonService';\r\nimport { useFetching } from '../../hooks/useFetching';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport cl from './AbilityPage.module.scss'\r\nimport Container from '../../components/Container/Container';\r\nimport Loader from '../../components/Loader/Loader';\r\n\r\ninterface IPokemonAbilityParams {\r\n    name: string\r\n    ability: string\r\n}\r\n\r\nconst AbilityPage = () => {\r\n    const DESCRIPTION_LANGUAGE = 'en'\r\n    const [abilityDescription, setAbilityDescription] = useState('')\r\n    const params: IPokemonAbilityParams = useParams()    \r\n    const [fetchAbility, isAbilityLoading, abilityLoadingError] = useFetching(async ()=> {\r\n        const response = await PokemonService.getAbility(params.ability);        \r\n        const entries = response.effect_entries\r\n        const entryInRequiredLanguage =  entries.find(entry => {\r\n            return entry.language.name === DESCRIPTION_LANGUAGE\r\n        })\r\n        entryInRequiredLanguage \r\n            ? setAbilityDescription(entryInRequiredLanguage.effect) \r\n            : setAbilityDescription('Sory there is no description in your language for current ability')\r\n    })\r\n\r\n    const router = useHistory()\r\n\r\n    useEffect(()=> {\r\n        fetchAbility()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n    \r\n    return (\r\n        <Container title={params.ability}>\r\n            <div className={cl.ability} >\r\n                {\r\n                    isAbilityLoading \r\n                        ? <Loader />\r\n                        : abilityLoadingError\r\n                            ?   <p>Sory, something went wrong... {abilityLoadingError}</p>\r\n                            :   <p className={cl.ability}>\r\n                                    {abilityDescription}\r\n                                </p>\r\n                }\r\n            \r\n                <button onClick={()=>{router.push(`/pokemons/${params.name}`)}}>back to Pokemon!</button>\r\n            </div>\r\n            \r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AbilityPage;\r\n","import { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport PokemonPage from \"../pages/PokemonPage/PokemonPage\";\r\nimport PokemonsPage from \"../pages/PokemonsPage/PokemonsPage\";\r\nimport  AbilityPage from '../pages/AbilityPage/AbilityPage';\r\n\r\nconst AppRouter = () => {\r\n    return (   \r\n        <Switch>\r\n            <Route exact path=\"/pokemons\">\r\n                <PokemonsPage />\r\n            </Route> \r\n            <Route exact path=\"/pokemons/:name\">\r\n                <PokemonPage />\r\n            </Route> \r\n            <Route exact path=\"/pokemons/:name/:ability\">\r\n                <AbilityPage />\r\n            </Route>\r\n            <Redirect to='/pokemons'/>\r\n        </Switch>            \r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n ","import { useState } from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { AppContext } from \"./context/AppContext\";\r\nimport { IContext, IPokemonsItem } from \"./interfaces/interfaces\";\r\nimport AppRouter from \"./router/AppRouter\";\r\n\r\n\r\nfunction App() {\r\n  const CARDS_PER_VIEW = 20;\r\n  const [pokemons, setPokemons] = useState<Array<IPokemonsItem>>([]);   \r\n  const [currentPage, setCurrentPage] = useState<number>(1)\r\n\r\n  const contextValue: IContext = {\r\n    pokemons: pokemons,\r\n    setPokemons: setPokemons,\r\n    currentPage: currentPage,\r\n    setCurrentPage: setCurrentPage,\r\n    cardsPerView: CARDS_PER_VIEW\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>\r\n      <BrowserRouter>\r\n        <AppRouter />\r\n      </BrowserRouter>\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","export function getPokemonId(\r\n    currentPage:number,\r\n    CardsPerView:number, \r\n    index:number\r\n) : number {\r\n    let pokemonId = (currentPage-1)*CardsPerView + index+1\r\n    if (pokemonId > 898) {\r\n        pokemonId = 10000+ pokemonId - 898\r\n    }\r\n    return pokemonId\r\n}\r\n\r\nexport function buildDataUrlImg (data: string): string {\r\n    const result = `data:image/png;base64, ${Buffer.from(data, 'binary').toString('base64')}`\r\n    return result\r\n}\r\n\r\nexport function findOutTotalPages(\r\n    totalCount: number, \r\n    CardsPerView: number\r\n): number {\r\n    const result = Math.ceil(totalCount/CardsPerView);\r\n    return result;\r\n}\r\n  \r\nexport function getPagination(\r\n    currentPage:number, \r\n    pageCount:number\r\n):Array<number|string>{\r\n    function getRange(\r\n        start:number, \r\n        end:number\r\n    ): number[] {\r\n        return Array(end - start + 1).fill(null).map((v, i) => i + start)\r\n    }\r\n\r\n    let delta:number\r\n    if (pageCount <= 7) {\r\n        // delta === 7: [1 2 3 4 5 6 7]\r\n        delta = 7\r\n    } else {\r\n        // delta === 2: [1 ... 4 5 6 ... 10]\r\n        // delta === 4: [1 2 3 4 5 ... 10]\r\n        delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4\r\n    }\r\n\r\n    const range = {\r\n        start: Math.round(currentPage - delta / 2),\r\n        end: Math.round(currentPage + delta / 2)\r\n    }\r\n\r\n    if (range.start - 1 === 1 || range.end + 1 === pageCount) {\r\n        range.start += 1\r\n        range.end += 1\r\n    }\r\n\r\n    let pages: Array<number|string> =\r\n        currentPage > delta\r\n            ? getRange(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount))\r\n            : getRange(1, Math.min(pageCount, delta + 1))\r\n\r\n    const withDots = (value:number, pair:Array<number|string>) => (pages.length + 1 !== pageCount ? pair : [value])\r\n\r\n    if (pages[0] !== 1) {\r\n        pages = withDots(1, [1, '...']).concat(pages)\r\n    }\r\n\r\n    if (pages[pages.length - 1] < pageCount) {\r\n        pages = pages.concat(withDots(pageCount, ['...', pageCount]))\r\n    }\r\n    return pages\r\n}\r\n\r\nexport function findAverageIntegerValue(x:number|string, y: number|string): number {\r\n    return Math.trunc((Number(x)+Number(y))/2)    \r\n}\r\n\r\n\r\n"],"sourceRoot":""}